generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

// ==================== Enums ====================

enum UserStatus {
  ACTIVE
  DELETION_PENDING
}

enum AccountProvider {
  GOOGLE
  LOCAL
  GITHUB
}

enum LoginMethod {
  EMAIL
  TOTP
  BACKUP_CODES
  OAUTH
}

enum MfaType {
  EMAIL
  TOTP
  BACKUP_CODES
}

enum AuditEvent {
  ACCOUNT_CREATED
  EMAIL_VERIFIED
  MFA_ENABLED
  LOGGED_IN
  MFA_DISABLED
  LOGIN_FAILED
  PASSWORD_CHANGED
  LOGGED_OUT
  EMAIL_UPDATED
  EMAIL_ADDED
  ACCOUNT_ADDED
  EMAIL_DELETED
  ACCOUNT_DELETED
}

// ==================== Website Models ====================

model User {
  id           String     @id() @default(uuid()) @db.Uuid
  isMfaEnabled Boolean    @default(false)
  status       UserStatus @default(ACTIVE)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  accounts      Account[]
  emailAdresses EmailAddress[]
  sessions      Session[]
  backupCodes   BackupCode[]
  auditLogs     AuditLog[]
  mfaFactors    MfaFactor[]
}

model Account {
  id             String          @id @default(uuid()) @db.Uuid
  providerUserId String          @unique
  provider       AccountProvider @default(LOCAL)
  userId         String          @db.Uuid
  hashedPassword String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerUserId, provider])
  @@index([userId])
}

model EmailAddress {
  id         String   @id @default(uuid()) @db.Uuid
  userId     String   @db.Uuid
  isVerified Boolean  @default(true)
  email      String   @unique @db.VarChar(320)
  isPrimary  Boolean
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  sessions Session[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Session {
  id             String      @id @default(uuid()) @db.Uuid
  refreshTokenId String      @unique
  loginMethod    LoginMethod @default(EMAIL)
  userId         String      @db.Uuid
  emailAddressId String      @db.Uuid
  userAgent      String?
  ipAddress      String?
  expiresAt      DateTime
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  isRevoked      Boolean     @default(false)

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  emailAddress EmailAddress @relation(fields: [emailAddressId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model MfaFactor {
  id           String   @id @default(uuid()) @db.Uuid
  userId       String   @db.Uuid
  type         MfaType
  hashedSecret String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model BackupCode {
  id         String   @id @default(uuid()) @db.Uuid
  hashedCode String
  userId     String   @db.Uuid
  createdAt  DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model AuditLog {
  id        String     @id @default(uuid()) @db.Uuid
  ipAddress String?
  userAgent String?
  userId    String     @db.Uuid
  event     AuditEvent
  metadata  Json?
  createdAt DateTime   @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
