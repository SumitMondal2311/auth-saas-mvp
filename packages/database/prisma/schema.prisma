generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ======================= ENUMERATIONS ======================= //

enum UserStatus {
  SUSPENDED
  ACTIVE
  DELETION_PENDING
}

enum OAuthProvider {
  GITHUB
  GOOGLE
}

// =================== PLATFORM-LEVEL MODELS =================== //

model User {
  id        String     @id @default(uuid()) @db.Uuid
  updatedAt DateTime   @updatedAt
  status    UserStatus @default(ACTIVE)
  createdAt DateTime   @default(now())

  accounts Account[]
}

model Account {
  id           String   @id @default(uuid()) @db.Uuid
  passwordHash String?
  imageUrl     String?
  lastName     String?
  userId       String   @db.Uuid
  firstName    String?
  is2faEnabled Boolean  @default(false)
  updatedAt    DateTime @updatedAt
  createdAt    DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  oauthAccounts  OAuthAccount[]
  phoneNumbers   Phone[]
  sessions       Session[]
  emailAddresses Email[]
  applications   Application[]
}

model Email {
  id         String   @id @default(uuid()) @db.Uuid
  isVerified Boolean  @default(true)
  accountId  String   @db.Uuid
  address    String   @unique
  isPrimary  Boolean
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  account Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
}

model Phone {
  id         String   @id @default(uuid()) @db.Uuid
  isVerified Boolean  @default(false)
  accountId  String   @db.Uuid
  number     String   @unique
  isPrimary  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  account Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
}

model Session {
  id             String   @id @default(uuid()) @db.Uuid
  accountId      String   @db.Uuid
  refreshTokenId String   @unique
  userAgent      String   @default("unknown")
  ipAddress      String   @default("unknown")
  expiresAt      DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  account Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
}

model OAuthAccount {
  id             String        @id @default(uuid()) @db.Uuid
  accountId      String        @db.Uuid
  provider       OAuthProvider
  providerUserId String
  createdAt      DateTime      @default(now())

  account Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@unique([provider, providerUserId])
}

model Application {
  id             String   @id @default(uuid()) @db.Uuid
  accountId      String   @db.Uuid
  secretKey      String   @unique
  publishableKey String   @unique
  name           String
  username       Boolean  @default(false)
  google         Boolean  @default(false)
  github         Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  account Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

  accounts       ApplicationAccount[]
  users          ApplicationUser[]
  oauthAccounts  ApplicationOAuthAccount[]
  sessions       ApplicationSession[]
  emailAddresses ApplicationEmail[]
  phoneNumbers   ApplicationPhone[]
}

// =================== APPLICATION-LEVEL MODELS =================== //

model ApplicationUser {
  id            String     @id @default(uuid()) @db.Uuid
  applicationId String     @db.Uuid
  status        UserStatus @default(ACTIVE)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  application Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  accounts ApplicationAccount[]
}

model ApplicationAccount {
  id            String   @id @default(uuid()) @db.Uuid
  applicationId String   @db.Uuid
  username      String?  @unique
  lastName      String?
  imageUrl      String?
  firstName     String?
  userId        String   @db.Uuid
  passwordHash  String?
  is2faEnabled  Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  application Application     @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  user        ApplicationUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  accounts       ApplicationOAuthAccount[]
  emailAddresses ApplicationEmail[]
  sessions       ApplicationSession[]
  phoneNumbers   ApplicationPhone[]
}

model ApplicationEmail {
  id            String   @id @default(uuid()) @db.Uuid
  accountId     String   @db.Uuid
  applicationId String   @db.Uuid
  isVerified    Boolean  @default(true)
  address       String
  isPrimary     Boolean
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  account     ApplicationAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)
  application Application        @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@unique([address, applicationId])
}

model ApplicationPhone {
  id            String   @id @default(uuid()) @db.Uuid
  accountId     String   @db.Uuid
  applicationId String   @db.Uuid
  isVerified    Boolean  @default(true)
  number        String
  isPrimary     Boolean
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  account     ApplicationAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)
  application Application        @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@unique([number, applicationId])
}

model ApplicationSession {
  id             String   @id @default(uuid()) @db.Uuid
  accountId      String   @db.Uuid
  refreshTokenId String   @unique
  userAgent      String   @default("unknown")
  ipAddress      String   @default("unknown")
  applicationId  String   @db.Uuid
  expiresAt      DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  account     ApplicationAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)
  application Application        @relation(fields: [applicationId], references: [id], onDelete: Cascade)
}

model ApplicationOAuthAccount {
  id             String        @id @default(uuid()) @db.Uuid
  accountId      String        @db.Uuid
  applicationId  String        @db.Uuid
  provider       OAuthProvider
  providerUserId String
  createdAt      DateTime      @default(now())

  account     ApplicationAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)
  application Application        @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@unique([providerUserId, provider, applicationId])
}
