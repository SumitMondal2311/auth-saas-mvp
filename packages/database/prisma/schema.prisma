generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

// ====================================================== //

enum IdentifierType {
  EMAIL
  PHONE
}

enum UserStatus {
  SUSPENDED
  ACTIVE
  DELETION_PENDING
}

enum AccountProvider {
  GITHUB
  LOCAL
  GOOGLE
}

enum LoginMethod {
  PASSWORD
  OTP
  SOCIAL
  MAGIC_LINK
}

enum AuditEvent {
  SIGNED_UP
  EMAIL_VERIFIED
  LOGGED_IN
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  ACCOUNT_ADDED
  ACCOUNT_DELETED
  EMAIL_ADDED
  EMAIL_DELETED
  LOGGED_OUT
  LOGIN_FAILED
  PASSWORD_RESET_INITIATED
  PASSWORD_RESET_COMPLETED
  MAGIC_LINK_SENT
  MAGIC_LINK_USED
}

// ====================================================== //

model User {
  id           String     @id() @default(uuid()) @db.Uuid
  is2faEnabled Boolean    @default(false)
  updatedAt    DateTime   @updatedAt
  status       UserStatus @default(ACTIVE)
  createdAt    DateTime   @default(now())

  applications Application[]
  accounts     Account[]
  identifiers  Identifier[]
  sessions     Session[]
  auditLogs    AuditLog[]
}

model Account {
  id             String          @id @default(uuid()) @db.Uuid
  providerUserId String          @unique
  provider       AccountProvider @default(LOCAL)
  userId         String          @db.Uuid
  hashedPassword String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerUserId, provider])
}

model Identifier {
  id         String         @id @default(uuid()) @db.Uuid
  isVerified Boolean        @default(true)
  value      String         @unique
  type       IdentifierType
  userId     String         @db.Uuid
  isPrimary  Boolean
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([value, type])
}

model Session {
  id             String      @id @default(uuid()) @db.Uuid
  loginMethod    LoginMethod @default(PASSWORD)
  userId         String      @db.Uuid
  ipAddress      String?
  userAgent      String?
  refreshTokenId String      @unique
  expiresAt      DateTime
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AuditLog {
  id        String     @id @default(uuid()) @db.Uuid
  ipAddress String?
  userAgent String?
  userId    String     @db.Uuid
  event     AuditEvent
  metadata  Json?
  createdAt DateTime   @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// ====================================================== //

model Application {
  id        String   @id() @default(uuid()) @db.Uuid
  publicKey String   @unique
  secretKey String   @unique
  name      String
  userId    String   @db.Uuid
  github    Boolean  @default(false)
  mobile    Boolean  @default(false)
  username  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  accounts    ApplicationAccount[]
  users       ApplicationUser[]
  identifiers ApplicationIdentifier[]
  sessions    ApplicationSession[]
  auditLogs   ApplicationAuditLog[]
}

enum TwoFactorMethod {
  NONE
  SMS
  EMAIL
}

model ApplicationUser {
  id              String          @id() @default(uuid()) @db.Uuid
  applicationId   String          @db.Uuid
  twoFactorMethod TwoFactorMethod @default(NONE)
  status          UserStatus      @default(ACTIVE)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  application Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  accounts    ApplicationAccount[]
  identifiers ApplicationIdentifier[]
  sessions    ApplicationSession[]
  auditLogs   ApplicationAuditLog[]
}

model ApplicationAccount {
  id             String          @id @default(uuid()) @db.Uuid
  applicationId  String          @db.Uuid
  providerUserId String
  provider       AccountProvider @default(LOCAL)
  username       String?         @unique
  userId         String          @db.Uuid
  hashedPassword String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  user        ApplicationUser @relation(fields: [userId], references: [id], onDelete: Cascade)
  application Application     @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@unique([providerUserId, provider, applicationId])
}

model ApplicationIdentifier {
  id            String         @id @default(uuid()) @db.Uuid
  applicationId String         @db.Uuid
  isVerified    Boolean        @default(true)
  value         String
  type          IdentifierType
  userId        String         @db.Uuid
  isPrimary     Boolean
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  user        ApplicationUser @relation(fields: [userId], references: [id], onDelete: Cascade)
  application Application     @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@unique([value, type, applicationId])
}

model ApplicationSession {
  id             String      @id @default(uuid()) @db.Uuid
  applicationId  String      @db.Uuid
  userAgent      String?
  ipAddress      String?
  loginMethod    LoginMethod @default(PASSWORD)
  refreshTokenId String      @unique
  userId         String      @db.Uuid
  expiresAt      DateTime
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  user        ApplicationUser @relation(fields: [userId], references: [id], onDelete: Cascade)
  application Application     @relation(fields: [applicationId], references: [id], onDelete: Cascade)
}

model ApplicationAuditLog {
  id            String     @id @default(uuid()) @db.Uuid
  applicationId String     @db.Uuid
  userId        String     @db.Uuid
  ipAddress     String?
  metadata      Json?
  event         AuditEvent
  userAgent     String?
  createdAt     DateTime   @default(now())

  user        ApplicationUser @relation(fields: [userId], references: [id], onDelete: Cascade)
  application Application     @relation(fields: [applicationId], references: [id], onDelete: Cascade)
}

// ====================================================== //
